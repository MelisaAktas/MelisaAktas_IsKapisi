// <auto-generated />
using System;
using IsKapisi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IsKapisi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240414185404_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("IsKapisi.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3960),
                            Description = "Eğitim Kategorisi",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3977),
                            Name = "Öğretmen",
                            Url = "ogretmen"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3982),
                            Description = "Hukuk",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3983),
                            Name = "Avukat",
                            Url = "avukat"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3984),
                            Description = "Bilgi İşlem",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3984),
                            Name = "Yazılım Geliştirme Uzmanı",
                            Url = "yazilim-geliştirme-uzmani"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3985),
                            Description = "İnsan Kaynaklari Uzmani",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3986),
                            Name = "İnsan Kaynaklari Uzmanı",
                            Url = "insan-kaynaklari-uzmani"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3987),
                            Description = "Developer",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(3987),
                            Name = "Back-End Developer",
                            Url = "back-end-developer"
                        });
                });

            modelBuilder.Entity("IsKapisi.Entity.CategoryJob", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("CategoryJob", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            JobId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            JobId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            JobId = 3
                        },
                        new
                        {
                            CategoryId = 3,
                            JobId = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            JobId = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            JobId = 5
                        },
                        new
                        {
                            CategoryId = 3,
                            JobId = 6
                        },
                        new
                        {
                            CategoryId = 3,
                            JobId = 7
                        },
                        new
                        {
                            CategoryId = 3,
                            JobId = 8
                        },
                        new
                        {
                            CategoryId = 5,
                            JobId = 8
                        },
                        new
                        {
                            CategoryId = 4,
                            JobId = 9
                        },
                        new
                        {
                            CategoryId = 3,
                            JobId = 10
                        },
                        new
                        {
                            CategoryId = 1,
                            JobId = 11
                        });
                });

            modelBuilder.Entity("IsKapisi.Entity.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("IsKapisi.Entity.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IsKapisi.Entity.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4836),
                            ImageUrl = "1.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4838),
                            Name = "Kimya Öğretmeni",
                            Properties = "Deneyimli Öğretmen",
                            Url = "kimya-ogretmen"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4845),
                            ImageUrl = "2.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4846),
                            Name = "İnsan Kaynakları Uzmanı",
                            Properties = " En az 3 yıl tecrübeli",
                            Url = "insan-kaynaklari-uzmani"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4847),
                            ImageUrl = "3.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4848),
                            Name = "Kıdemli Avukat",
                            Properties = "Deneyimi 5 - 10 yıl arası",
                            Url = "avukat"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4849),
                            ImageUrl = "4.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4850),
                            Name = "Yazılım Destek Elemanı",
                            Properties = "Tecrübeli/Tecrübesiz",
                            Url = "yazilim-destek-uzmani"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4851),
                            ImageUrl = "5.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4851),
                            Name = "Backend Developer (İstanbul-Ankara-İzmir)",
                            Properties = "  En az 3 yıl deneyimli,",
                            Url = "back-end-gelistirici"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4853),
                            ImageUrl = "6.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4853),
                            Name = "React Front-End Geliştirici",
                            Properties = "2 - 6 yıl arası",
                            Url = "react-front-end"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4854),
                            ImageUrl = "7.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4855),
                            Name = "React Native Developer",
                            Properties = "En az 3 yıl deneyimli",
                            Url = "react-native"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4856),
                            ImageUrl = "8.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4856),
                            Name = "Data Science Professionals - Discovery (İstanbul, Ankara, İzmir)",
                            Properties = "Uzman",
                            Url = "data-science"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4858),
                            ImageUrl = "9.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4858),
                            Name = "İdari İşler Profesyonelleri ",
                            Properties = "Minimum 7 yıl idari işler alanında deneyimli",
                            Url = "idari-isler"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4859),
                            ImageUrl = "10.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4860),
                            Name = "Front-end Developer ",
                            Properties = "Minimum 7 yıl react üzerinde çalışmış",
                            Url = "idari-isler"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4861),
                            ImageUrl = "11.png",
                            IsActive = true,
                            IsDelete = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 4, 14, 21, 54, 3, 903, DateTimeKind.Local).AddTicks(4861),
                            Name = "Müzik Öğretmeni",
                            Properties = "En az 10 yıl tecrübeli",
                            Url = "muzik-ogretmen"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IsKapisi.Entity.CategoryJob", b =>
                {
                    b.HasOne("IsKapisi.Entity.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IsKapisi.Entity.Job", "Job")
                        .WithMany("CategoryJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IsKapisi.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IsKapisi.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IsKapisi.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("IsKapisi.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IsKapisi.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IsKapisi.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IsKapisi.Entity.Category", b =>
                {
                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("IsKapisi.Entity.Job", b =>
                {
                    b.Navigation("CategoryJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
